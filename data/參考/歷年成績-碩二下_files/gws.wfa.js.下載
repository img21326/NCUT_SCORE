;(function(d) {
    d.extend({
        Between: function(a, b, c) {
            if ((a >= b) && (a <= c)) {
                return true;
            } else {
                return false;
            }
        },
        IsBig5Set: function(high, low) {
            if (d.Between(low, 0x40, 0x7E) || d.Between(low, 0xA1, 0xFE)) {
                if (d.Between(high, 0xA3, 0xA3) && d.Between(low, 0xC0, 0xFE)) {
                    return false;
                }
                if (d.Between(high, 0xA1, 0xC5) || d.Between(high, 0xC9, 0xF9)) {
                    return true;
                } else if (d.Between(high, 0xC6, 0xC6) && d.Between(low, 0x40, 0x7E)) {
                    return true;
                }
            }
            return false;
        },
        Ascii2Hex: function(ascii) {
            var digitArr = Array('0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F');
            var result = '';
            var start = true;
            for (var i = 32; i > 0; ) {
                i -= 4;
                var digit = (ascii >> i) & 0xf;
                if (!start || digit != 0) {
                    start = false;
                    result += digitArr[digit];
                }
            }
            return result == '' ? '0' : result;
        },
        IsBig5: function(word) {
            var ascii = word.charAt(0).charCodeAt(0);
            if (d.Between(ascii, 0xE000, 0xF8FF)) {
                return false;
            } else {
                return true;
            }
        },
        GetCharsetType: function(word) {
            var ascii = word.charAt(0).charCodeAt(0);
            var unicode = d.Ascii2Hex(ascii);
            var charsetType = {
                alphanumeric: false,
                unicode: false,
                gaijis: false,
                mapping: false
            }
            if (!d.Between(ascii, 0x00, 0x7F)) {
                charsetType.alphanumeric = false;
                if (d.Between(ascii, 0xE000, 0xF8FF)) {
                    charsetType.unicode = true;
                    charsetType.gaijis = true;
                } else {
                    var big5 = mapping[unicode];
                    if (typeof (big5) == 'undefined') {} else {
                        charsetType.mapping = true;
                        if ((d.Between(low, 0x00, 0x7F)) && (high == 0x00)) {} else {
                            if (d.IsBig5Set(high, low)) {
                                charsetType.gaijis = false;
                            } else {
                                charsetType.gaijis = true;
                            }
                        }
                    }
                }
            } else {
                charsetType.alphanumeric = true;
            }
            return charsetType;
        },
        Big52Unicode: function(word) {
            var Translate = function(high, low) {
                var seq = 0;
                if ((low < 0x40) || (low > 0xFE)) {
                    return ( -1) ;
                }
                if ((0x7F <= low) && (low <= 0xA0)) {
                    return ( -1) ;
                }
                if ((0xFA <= high) && (high <= 0xFE)) {
                    high = high - 0xFA;
                } else if ((0x8E <= high) && (high <= 0xA0)) {
                    high = high - 0x8E + 5;
                } else if ((0x81 <= high) && (high <= 0x8D)) {
                    high = high - 0x81 + 24;
                } else if ((0xC6 <= high) && (high <= 0xC8)) {
                    if ((high == 0xC6) && (low < 0xA1))
                        return ( 0) ;
                    if (low >= 0xA1) {
                        low = 63 + (low - 0xA1);
                    } 
                    else {
                        low -= 0x40;
                    }
                    high = high - 0xC6 + 37;
                    seq = 157 * high + low - 63;
                    return seq;
                } else {
                    return ( -1) ;
                }
                seq = 157 * high;
                if (low >= 0xA1) {
                    low = 63 + (low - 0xA1);
                } 
                else {
                    low -= 0x40;
                }
                return seq + low;
            }
            var big5 = '0x' + escape(word).substr(2, 4);
            var decimal = parseInt(big5);
            var high = (decimal >> 8) & 0xFF;
            var low = (decimal & 0xFF);
            return String.fromCharCode(0xE000 + Translate(high, low))
        },
        FirefoxUAO: function(elem, type) {
            if (type == 'hkscs') {
                var mapping = d.mapping['hkscs'];
            } else {
                var mapping = d.mapping['uao'];
            }
            var str, sentence, sentence2;
            for (var i in elem) {
                if (d.user.prototypeDebug == true && !elem.hasOwnProperty(i)) continue;
		if (elem[i].nodeValue == null ) {
                    if (elem[i].innerHTML.length > 0) {
                        sentence = elem[i].innerHTML;
                        sentence = sentence.split('');
                        sentence2 = '';
                        for (var j = 0; j < sentence.length; j++) {
                            if (d.user.prototypeDebug == true && !sentence.hasOwnProperty(j))
                                continue;str = sentence[j];
                            str2 = sentence[j + 1];
                            if (typeof (mapping[escape(str) + escape(str2)]) !== 'undefined') {
                                j++;
                                sentence2 += String.fromCharCode(mapping[escape(str) + escape(str2)]);
                            } else if (typeof (mapping[escape(str)]) !== 'undefined') {
                                sentence2 += String.fromCharCode(mapping[escape(str)]);
                            } else {
                                sentence2 += str;
                            }
                        }
                        elem[i].innerHTML = sentence2;
                    } else {
                        sentence = elem[i].value;
                        sentence = sentence.split('');
                        sentence2 = '';
                        for (var j = 0; j < sentence.length; j++) {
                            if (d.user.prototypeDebug == true && !sentence.hasOwnProperty(j))
                                continue;str = sentence[j];
                            str2 = sentence[j + 1];
                            if (typeof (mapping[escape(str) + escape(str2)]) !== 'undefined') {
                                j++;
                                sentence2 += String.fromCharCode(mapping[escape(str) + escape(str2)]);
                            } else if (typeof (mapping[escape(str)]) !== 'undefined') {
                                sentence2 += String.fromCharCode(mapping[escape(str)]);
                            } else {
                                sentence2 += str;
                            }
                        }
                        elem[i].value = sentence2;
                    }
                } else {
                    sentence = elem[i].nodeValue;
                    sentence = sentence.split('');
                    sentence2 = '';
                    for (var j = 0; j < sentence.length; j++) {
                        if (d.user.prototypeDebug == true && !sentence.hasOwnProperty(j))
                            continue;str = sentence[j];
                        str2 = sentence[j + 1];
                        if (typeof (mapping[escape(str) + escape(str2)]) !== 'undefined') {
                            j++;
                            sentence2 += String.fromCharCode(mapping[escape(str) + escape(str2)]);
                        } else if (typeof (mapping[escape(str)]) !== 'undefined') {
                            sentence2 += String.fromCharCode(mapping[escape(str)]);
                        } else {
                            sentence2 += str;
                        }
                    }
                    elem[i].nodeValue = sentence2;
                }
            }
        },
        Str2UTF8: function(str) {
            var utf8 = escape(str);
            if (utf8.length == 6) {
                return utf8.substr(2, 4);
            } else if (utf8.length == 12) {
                return utf8.substr(2, 4) + utf8.substr(8, 12);
            } else {
                return null 
            }
        },
        UrlUTF82UTF8: function(str) {
            str = decodeURI(str);
            return str;
        },
        Str2UrlUTF8: function(type, str) {
            var utf8 = [];
            var unicode = null ;
            for (var i in str) {
                if (d.user.prototypeDebug == true && !str.hasOwnProperty(i))
                    continue;if (type == 'unicode') {
                    unicode = escape(str[i]);
                    str[i] = String.fromCharCode(d.mapping['unicode'][unicode.substr(2, 4)]);
                }
                try {
                    utf8[i] = encodeURI(str[i]);
                } catch (e) {}
            }
            return utf8;
        },
        GetValue: function(elem) {
            if (typeof (elem.value) !== 'undefined' && elem.value !== null ) {
                return elem.value;
            } else if (typeof (elem.innerHTML) !== 'undefined' && elem.innerHTML !== null ) {
                return elem.innerHTML
            } else if (typeof (elem.nodeValue) !== 'undefined' && elem.nodeValue !== null ) {
                return elem.nodeValue;
            } else {
                return elem;
            }
        },
        NotSearch: function(elem, classname) {
            var mismatch = false;
            for (var j = 0; j < classname.length; j++) {
                if (elem.className.search(classname[j]) >= 0) {
                    mismatch = true;
                }
            }
            if (mismatch === true)
                return true;
            return false;
        },
        GetChildred: function(type, parent, elem, str) {
            var val, child, childred, check;
            elem = elem ? elem : [];
            str = str ? str : [];
            parent = typeof (parent.length) != 'undefined' ? parent : [parent];
            for (var i = 0; i < parent.length; i++) {
                child = parent[i];
                if (typeof (child) === 'undefined')
                    continue;if (d.user.passHidden == true && d.isHidden(child) == true && d.GetClass(child, 'dcw-emluator', 'fuzzy') == false)
                    continue;if (type == 'gaiji') {
                    if (!d.CanListen(child))
                        continue;
                }
                if (type == 'all') {
                    if (child.nodeType === 1 && child.nodeName == 'OPTION') {
                        if ((child.parentNode.nodeName).toUpperCase() == 'OPTGROUP') {
                            elem.push(child.parentNode.parentNode);
                        } else {
                            elem.push(child.parentNode);
                        }
                    }
                }
                if (child.nodeType === 3) {
                    if ((child.parentNode.nodeName).toUpperCase() == 'TEXTAREA') {
                        val = child.parentNode.value;
                        if (type == 'all') {
                            elem.push(child.parentNode);
                        } else {
                            check = d.CheckStr(type, val);
                            if (check['match']) {
                                elem.push(child.parentNode);
                                for (j = 0; j < check.str.length; j++)
                                    str.push(check.str[j]);
                            }
                        }
                    } else if ((child.parentNode.nodeName).toUpperCase() == 'OPTION') {
                        val = child.nodeValue;
                        if (type == 'all') {
                            if ((child.parentNode.parentNode.nodeName).toUpperCase() == 'OPTGROUP') {
                                elem.push(child.parentNode.parentNode.parentNode);
                            } else {
                                elem.push(child.parentNode.parentNode);
                            }
                        } else {
                            check = d.CheckStr(type, val);
                            if (check['match']) {
                                if ((child.parentNode.parentNode.nodeName).toUpperCase() == 'OPTGROUP') {
                                    elem.push(child.parentNode.parentNode.parentNode);
                                } else {
                                    elem.push(child.parentNode.parentNode);
                                }
                                for (j = 0; j < check.str.length; j++)
                                    str.push(check.str[j]);
                            }
                        }
                    } else {
                        if (type == 'all') {
                            elem.push(child);
                        } else {
                            val = child.nodeValue;
                            check = d.CheckStr(type, val);
                            if (check['match']) {
                                elem.push(child);
                                for (j = 0; j < check.str.length; j++)
                                    str.push(check.str[j]);
                            }
                        }
                    }
                } else if (((child.nodeName).toUpperCase() == 'INPUT' && ((child.type).toUpperCase() == 'TEXT' || (child.type).toUpperCase() == 'BUTTON')) || ((child.nodeName).toUpperCase() == 'TEXTAREA')) {
                    if (type == 'all') {
                        elem.push(child);
                    } else {
                        val = child.value;
                        check = d.CheckStr(type, val);
                        if (d.user.setGaijiClass == true)
                            elem.push(child);
                        if (check['match']) {
                            if (d.user.setGaijiClass != true)
                                elem.push(child);
                            for (j = 0; j < check.str.length; j++)
                                str.push(check.str[j]);
                        }
                    }
                } else if ((child.nodeName).toUpperCase() != 'SCRIPT') {
                    childred = d.GetChildred(type, child.childNodes, elem, str);
                    elem = childred.elem;
                    str = childred.str;
                }
            }
            return {
                elem: elem,
                str: str
            };
        },
        SelectByNodeName: function(nodeName, elem, typeName) {
            var arr = [];
            for (var i = 0; i < elem.length; i++) {
                if (elem[i].nodeName.toUpperCase() == nodeName.toUpperCase()) {
                    if (typeof (typeName) == "undefined" || elem[i].type == typeName) {
                        arr.push(elem[i]);
                    }
                }
            }
            return arr;
        },
        GetNode: function(type, parent) {
            var childred;
            var result = {
                elem: [],
                str: []
            };
            if (typeof (parent) == 'undefined')
                return {
                    elem: [],
                    str: []
                }
            var parent = typeof (parent.length) != 'undefined' ? parent : [parent];
            for (var i = 0; i < parent.length; i++) {
                if (typeof (parent[i]) === 'undefined')
                    continue;if (d.user.passHidden == true && d.isHidden(parent[i]) == true && d.GetClass(parent[i], 'dcw-emluator', 'fuzzy') == false)
                    continue;childred = d.GetChildred(type, parent[i]);
                result = {
                    elem: result['elem'].concat(childred.elem),
                    str: result['str'].concat(childred.str)
                }
            }
            return result;
        },
        Is4byte: function(str) {
            if (typeof (str[0]) !== 'undefined' && str[0].charCodeAt(0) >= '0xD800' && str[0].charCodeAt(0) <= '0xDBFF') {
                if (typeof (str[1]) !== 'undefined' && str[1].charCodeAt(0) >= '0xDC00' && str[1].charCodeAt(0) <= '0xDFFF') {
                    return str[0] + str[1];
                }
            }
            if (typeof (str[2]) !== 'undefined' && str[2].charCodeAt(0) >= '0xDC00' && str[2].charCodeAt(0) <= '0xDFFF') {
                if (typeof (str[1]) !== 'undefined' && str[1].charCodeAt(0) >= '0xD800' && str[1].charCodeAt(0) <= '0xDBFF') {
                    return str[1] + str[2];
                }
            }
            return false;
        },
        GetIgnore: function() {
            var ignore = [];
            if (typeof (d.font[d.glob.code['wfa']]['ignore']) == 'undefined')
                return;
            for (var i in d.font[d.glob.code['wfa']]['ignore']) {
                var ignoreOS = d.font[d.glob.code['wfa']]['ignore'][i];
                for (var j = 0; j < ignoreOS.length; j++) {
                    if (ignoreOS[j] == dynaRequire.GetOS()['os']) {
                        ignore.push(i);
                    }
                }
            }
            return ignore;
        },
        CheckStr: function(type, val) {
            var word;
            var match = false;
            var str = [];
            var sentence = [];
            var raw_val = val;
            var val = val.length > 0 ? val.split('') : val;
            if (type == 'gaiji' && d.font[d.glob.code['wfa']]['range'] === true) {
                for (var i = 0; i < val.length; i++) {
                    str.push(val[i]);
                    match = true;
                }
            } else {
                for (var i = 0; i < val.length; i++) {
                    switch (type) {
                    case 'gaiji':
                        for (var j in d.font[d.glob.code['wfa']]['range']) {
                            if (d.user.prototypeDebug == true && !(d.font[d.glob.code['wfa']]['range']).hasOwnProperty(j))
                                continue;var stop = false;
                            for (var k in d.glob.ignore) {
                                if (j == d.glob.ignore[k]) {
                                    stop = true;
                                    break;
                                }
                            }
                            if (stop == true)
                                continue;if (j == '4byte') {
                                var range = d.font[d.glob.code['wfa']]['range'][j];
                                for (k = 0; k < range.length; k++) {
                                    for (var l in range[k]) {
                                        if (d.user.prototypeDebug == true && !(range[k]).hasOwnProperty(l))
                                            continue;word = val[i + k];
                                        sentence[k] = word;
                                        if (typeof (word) !== 'undefined' && word.charCodeAt(0) >= l && word.charCodeAt(0) <= range[k][l]) {
                                            if (k + 1 == range.length) {
                                                str.push(sentence.join(''));
                                                sentence.length = 0;
                                                match = '4byte';
                                            }
                                            continue;
                                        } else {
                                            break;
                                        }
                                    }
                                }
                            } else if ((typeof (j) == 'string') && (typeof (d.font[d.glob.code['wfa']]['range'][j]) != 'string')) {
                                for (var k in d.font[d.glob.code['wfa']]['range'][j]) {
                                    for (var l in d.font[d.glob.code['wfa']]['range'][j][k]) {
                                        if (val[i].charCodeAt(0) >= l && val[i].charCodeAt(0) <= d.font[d.glob.code['wfa']]['range'][j][k][l]) {
                                            str.push(val[i]);
                                            match = true;
                                        }
                                    }
                                }
                            } else if ((typeof (j) == 'string') && (typeof (d.font[d.glob.code['wfa']]['range'][j]) == 'string')) {
                                if (val[i].charCodeAt(0) >= j && val[i].charCodeAt(0) <= d.font[d.glob.code['wfa']]['range'][j]) {
                                    str.push(val[i]);
                                    match = true;
                                }
                            }
                        }
                        break;
                    case 'unicode':
                        if (d.Is4byte(val[i] + val[i + 1]) != false) {
                            word = {
                                'raw': val[i] + val[i + 1],
                                'unicode': escape(val[i] + val[i + 1])
                            }
                            i++;
                        } else {
                            word = {
                                'raw': val[i],
                                'unicode': escape(val[i])
                            }
                        }
                        if (word['unicode'].length === 6 || word['unicode'].length === 12) {
                            if (word['unicode'].length === 6)
                                word['utf16'] = word['unicode'].substr(2, 4);
                            if (word['unicode'].length === 12)
                                word['utf16'] = word['unicode'].substr(2, 4) + '0x' + word['unicode'].substr(8, 12);
                            if (typeof (d.mapping['unicode'][word['utf16']]) !== 'undefined') {
                                match = true;
                            } else {
                                str.push(word['raw']);
                                match = 'Not Exists';
                            }
                            if (typeof (d.mapping['unicode']['0x' + word['utf16']]) !== 'undefined') {
                                str.push(word['raw']);
                                match = 'Exists';
                            } else if (typeof (d.mapping['unicode']['0' + word['utf16']]) !== 'undefined') {
                                str.push(word['raw']);
                                match = 'Exists(Compatibility)';
                            }
                        }
                        break;
                    case 'uao':
                        if (typeof (d.mapping['uao'][escape(val[i])]) !== 'undefined') {
                            str.push(val[i]);
                            match = true;
                        }
                        break;
                    case 'hkscs':
                        if (typeof (d.mapping['hkscs'][escape(val[i]) + escape(val[i + 1])]) !== 'undefined') {
                            str.push(val[i] + val[i + 1]);
                            match = true;
                            i++;
                        } else if (typeof (d.mapping['hkscs'][escape(val[i])]) !== 'undefined') {
                            str.push(val[i]);
                            match = true;
                        }
                        break;
                    case 'all':
                        str.push(val[i]);
                        match = true;
                        break;
                    }
                }
            }
            return {
                match: match,
                str: str
            };
        },
        ReplaceNode: function() {
            var span, check, word, sentence, val;
            var nodeName = ['INPUT', 'TEXTAREA', 'SELECT'];
            var options = arguments[0];
            var setting = {
                fontClass: d.font[d.glob.code['wfa']]['fontClass'],
                fontface: d.font[d.glob.code['wfa']]['fontface'],
                count: null 
            }
            var s = d.extend(true, setting, options);
            for (var i = 0; i < s.elem.length; i++) {
                if (s.elem[i].nodeType === 3) {
                    sentence = '',
                    raw_sentence = '';
                    val = (s.elem[i].nodeValue).split('');
                    switch (s.type) {
                    case 'gaiji':
                        for (var j = 0; j < val.length; j++) {
                            word = {
                                '4byte': val[j] + val[j + 1],
                                '2byte': val[j]
                            }
                            check = d.CheckStr(s.type, word['4byte']);
                            raw_sentence = raw_sentence + val[j];
                            if (d.GetClass(s.elem[i].parentNode, 'dcw-emluator-input', 'fuzzy') && d.user['showType'] === 'string') {
                                sentence = sentence + val[j];
                            } else {
                                if (check['match'] === true) {
                                    if (d.user['showType'] === 'span') {
                                        var url = d.Str2UTF8(word['2byte']);
                                        if (url == null ) {
                                            sentence = sentence + '<span class="' + s.fontClass + ' ' + d.user.gajisClass + '">' + word['2byte'] + '</span>';
                                        } else {
                                            sentence = sentence + '<span contentEditable="false" onclick="" oncontrolselect="" style="background-image: url(' + d.glob['url'] + d.user['imgPath'] + setting.fontface + '/' + url + '.png)" class="' + s.fontClass + ' ' + d.user.gajisClass + '" data-image="' + d.glob['url'] + d.user['imgPath'] + url + '.png"  data-font="' + word['2byte'] + '"><span class="' + s.fontClass + ' ' + d.user.gajisClass + '">' + word['2byte'] + '</span></span>';
                                        }
                                    } else if (d.user['showType'] === 'image') {
                                        var url = d.Str2UTF8(word['2byte']);
                                        if (d.GetClass(s.elem[i].parentNode, 'dcw-emluator-input', 'fuzzy')) {
                                            sentence = sentence + word['2byte'];
                                        } else {
                                            sentence = sentence + '<span class="' + s.fontClass + ' ' + d.user.gajisClass + '">' + word['2byte'] + '</span>';
                                        }
                                    } else {
                                        sentence = sentence + '<span class="' + s.fontClass + ' ' + d.user.gajisClass + '">' + word['2byte'] + '</span>';
                                    }
                                } else if (check['match'] === '4byte') {
                                    if (d.user['showType'] === 'span') {
                                        var url = d.Str2UTF8(word['4byte']);
                                        if (url == null ) {
                                            sentence = sentence + '<span class="' + s.fontClass + ' ' + d.user.gajisClass + '">' + word['4byte'] + '</span>';
                                        } else {
                                            sentence = sentence + '<span contentEditable="false" onclick="" oncontrolselect="" style="background-image: url(' + d.glob['url'] + d.user['imgPath'] + setting.fontface + '/' + url + '.png)" class="dcw-image ' + s.fontClass + ' ' + d.user.gajisClass + '" data-image="' + d.glob['url'] + d.user['imgPath'] + url + '.png"  data-font="' + word['4byte'] + '"><span class="' + s.fontClass + ' ' + d.user.gajisClass + '">' + word['4byte'] + '</span></span>';
                                        }
                                    } else if (d.user['showType'] === 'image') {
                                        var url = d.Str2UTF8(word['4byte']);
                                        if (url == null ) {
                                            sentence = sentence + '<span class="' + s.fontClass + ' ' + d.user.gajisClass + '">' + word['4byte'] + '</span>';
                                        } else {
                                            sentence = sentence + '<img style="width:16px; height:16px" contentEditable="false" oncontrolselect="" alt="' + word['4byte'] + '" src="' + d.glob['url'] + d.user['imgPath'] + setting.fontface + '/' + url + '.png" class="dcw-image ' + s.fontClass + ' ' + d.user.gajisClass + '">';
                                        }
                                    } else {
                                        sentence = sentence + '<span class="' + s.fontClass + ' ' + d.user.gajisClass + '">' + word['4byte'] + '</span>';
                                    }
                                    j++;
                                } else {
                                    sentence = sentence + val[j];
                                }
                            }
                        }
                        break;
                    }
                    if (d.GetClass(s.elem[i].parentNode, 'dcw-emluator-input', 'fuzzy') && d.user['showType'] != 'string') {
                        s.elem[i].parentNode.className = '';
                        d.CreateClass(s.elem[i].parentNode, 'dcw-emluator-input');
                        d.CreateClass(s.elem[i].parentNode, s.fontClass);
                        d.CreateClass(s.elem[i].parentNode, d.user.gajisClass);
                        if (raw_sentence != sentence)
                            d.ReplaceWith(s.elem[i], sentence);
                    } 
                    else if (s.elem[i].parentNode != null  && s.elem[i].parentNode.className.indexOf(d.user['gajisClass']) >= 0) {
                        if (d.GetClass(s.elem[i].parentNode, 'dcw-emluator-input', 'fuzzy')) {
                            s.elem[i].parentNode.className = '';
                            d.CreateClass(s.elem[i].parentNode, 'dcw-emluator-input');
                        } else {
                            s.elem[i].parentNode.className = '';
                        }
                        d.CreateClass(s.elem[i].parentNode, s.fontClass);
                        d.CreateClass(s.elem[i].parentNode, d.user.gajisClass);
                        if (d.user['showType'] === 'span' || d.user['showType'] === 'image')
                            d.CreateClass(s.elem[i].parentNode, 'dcw-image');
                    } else {
                        d.ReplaceWith(s.elem[i], sentence);
                    }
                } else {
                    sentence = '';
                    for (var j in nodeName) {
                        if (d.user.prototypeDebug == true && !nodeName.hasOwnProperty(j))
                            continue;if (s.elem[i].nodeName == nodeName[j]) {
                            if (s.elem[i].nodeName == 'INPUT' && s.elem[i].type != 'text')
                                return;
                            switch (s.type) {
                            case 'gaiji':
                                d.DeleteClass(s.elem[i], 'dcw-font', 'fuzzy');
                                d.CreateClass(s.elem[i], s.fontClass);
                                break;
                            case 'unicode':
                                var unicode, utf16;
                                var match = false;
                                val = (s.elem[i].value).split('');
                                for (var k = 0; k < val.length; k++) {
                                    if (d.user.prototypeDebug == true && !val.hasOwnProperty(k))
                                        continue;if (d.Is4byte(val[k] + val[k + 1]) != false) {
                                        word = val[k] + val[k + 1];
                                        unicode = escape(word);
                                        utf16 = unicode.substr(2, 4) + '0x' + unicode.substr(8, 12);
                                        k++;
                                    } else {
                                        word = val[k];
                                        unicode = escape(word);
                                        utf16 = unicode.substr(2, 4);
                                    }
                                    check = d.CheckStr(s.type, word);
                                    if (check['match'] === 'Exists') {
                                        var cs = String.fromCharCode(d.mapping['unicode']['0x' + utf16]);
                                        cs = d.IsBig5(cs) ? d.Big52Unicode(cs) : cs;
                                        sentence += cs;
                                        match = true;
                                    } else if (check['match'] == 'Exists(Compatibility)') {
                                        var cs = String.fromCharCode(d.mapping['unicode']['0' + utf16]);
                                        cs = d.IsBig5(cs) ? d.Big52Unicode(cs) : cs;
                                        sentence += cs;
                                        match = true;
                                    } else if (check['match'] == 'Not Exists') {
                                        switch (d.user.unicode2big5['action']) {
                                        case 'alert':
                                            alert(d.user.unicode2big5['message'][d.user.lang] + '\n\n' + word);
                                            break;
                                        case 'console':
                                            console.log(d.user.unicode2big5['message'][d.user.lang] + '\n\n' + word);
                                            break;
                                        }
                                        if (d.user.unicode2big5['remove'] !== true) {
                                            sentence += String.fromCharCode(d.mapping['unicode']['0' + utf16]);
                                        }
                                        match = true;
                                    } 
                                    else {
                                        sentence += word;
                                    }
                                }
                                if (match) {
                                    s.elem[i].value = sentence;
                                    d.CreateClass(s.elem[i], s.fontClass);
                                    s.elem[i].style.fontFamily = s.count == null  || s.count < 1 ? s.fontface : s.fontface + s.count;
                                }
                                break;
                            }
                        }
                    }
                }
            }
            if (s.type == 'gaiji') {
                d.SetFontFace({
                    target: d.DOM(s.fontClass, 'class'),
                    fontface: s.count == null  || s.count < 1 ? s.fontface : s.fontface + s.count
                })
            }
        },
        IsNewGaiji: function(arr, arr2) {
            var match, isNewGaiji;
            for (var i in arr) {
                if (d.user.prototypeDebug == true && !arr.hasOwnProperty(i))
                    continue;for (var j in arr2) {
                    if (d.user.prototypeDebug == true && !arr2.hasOwnProperty(j))
                        continue;if (arr[i] == arr2[j])
                        match = true;
                }
                if (match)
                    match = false;
                else
                    isNewGaiji = true;
            }
            return isNewGaiji;
        },
        SetFontFaceOuter: function(code) {
            d.user.code['wfa'] = code;
            d.StartGWS();
        },
        GetSelectNode: function(nodeName, elem) {
            var arr = [];
            for (var i in elem) {
                if (d.user.prototypeDebug == true && !elem.hasOwnProperty(i))
                    continue;if (elem[i].nodeName.toUpperCase() == nodeName.toUpperCase()) {
                    arr.push(elem[i]);
                }
            }
            return arr;
        }
    });
    d.extend({
        StartWFA: function(options) {
            d.Log('## Start WFA', 3);
            d.SetState('Start WFA');
            var setting = {
                elem: d.font[d.glob.code['wfa']]['object'],
                str: null ,
                code: d.glob.code['wfa'],
                unicode2big5: d.glob.features['unicode'],
                webFullCSS: d.user.webFullCSS,
                imeFullCSS: d.user.imeFullCSS,
                isWIME: false
            }
            setting = d.extend(true, setting, options);
            if (typeof (d.glob.reWFAID[0]) !== 'undefined')
                clearTimeout(d.glob.reWFAID[0]);
            if (setting.unicode2big5) {
                d.PartWFA({
                    type: 'unicode',
                    elem: setting['elem'],
                    conn: false
                });
            }
            if (d.glob.fullGaiji[setting['code']] == true || setting['webFullCSS'] == true || (setting['isWIME'] == true && setting['imeFullCSS'] == true)) {
                d.glob.fullGaiji[setting['code']] = true;
                d.FullWFA(setting['elem']);
            } else {
                if (d.glob.features['wime'] === true && d.user.imeNewCSS['enable'] == true && setting['isWIME'] == true) {
                    d.PartWFA({
                        type: 'gaiji',
                        elem: setting['elem'],
                        code: setting['code'],
                        str: d.Str2UrlUTF8('gaiji', setting['str']).concat(d.glob.gaiji[d.user.imeNewCSS['id']]),
                        fontClass: d.font[setting['code']]['fontClass'] + d.user.sign['wime'],
                        fontface: d.font[setting['code']]['fontface'] + d.user.sign['wime'],
                        fontID: d.user.imeNewCSS['id']
                    });
                } else {
                    d.PartWFA({
                        type: 'gaiji',
                        elem: setting['elem'],
                        code: setting['code'],
                        count: d.glob.count[setting['code']]
                    });
                }
            }
        },
        GetNodeType: function(str) {
            var result = {};
            if (str.indexOf("[") >= 0) {
                var reg = new RegExp('(.+?).type=(.+).',"gi");
                result.node = str.replace(reg, "$1");
                result.type = str.replace(reg, "$2");
            } else {
                result.node = str;
                result.type = undefined;
            }
            return result;
        },
        CreateStyle: function(css, id) {
            var elem;
            var head = document.head || document.getElementsByTagName('head')[0];
            if (document.getElementById(id)) {
                elem = document.getElementById(id);
            } else {
                elem = document.createElement('style');
                elem.type = 'text/css';
                elem.id = id;
                head.appendChild(elem);
            }
            if (elem.styleSheet) {
                elem.styleSheet.cssText = css;
            } else {
                elem.appendChild(document.createTextNode(css));
            }
        },
        FullWFA: function(elem) {
            d.Log('## FullWFA', 3);
            d.SetState('Full WFA: ' + d.font[d.glob.code['wfa']]['fontface']);
            d.glob.fullGaiji[d.glob.code['wfa']] = true;
            d.InsertScript('css', d.glob['url'] + d.user['cssPath'] + d.font[d.glob.code['wfa']]['fontface'] + d.glob['extendName'] + '.css', d.font[d.glob.code['wfa']]['fontID']);
            var node = d.GetNode('gaiji', elem);
            if (node['elem'].length > 0) {
                d.Log(' + Find Gaijis Element: ' + node['elem'].length);
                d.ReplaceNode({
                    type: 'gaiji',
                    elem: node['elem'],
                    fontface: d.font[d.glob.code['wfa']]['fontface'],
                    fontClass: d.font[d.glob.code['wfa']]['fontClass']
                });
            }
            d.SetState('Finish');
            if (d.user.reWFA === true) {
                if (d.glob.reWFAID[0])
                    clearTimeout(d.glob.reWFAID[0]);
                d.glob.reWFAID[0] = setTimeout(function() {
                    d.FullWFA(elem);
                    d.startTrigger.Initialize()
                }, d.user['reWFATimer']);
            }
        },
        PartWFA: function() {
            d.Log('## PartWFA', 3);
            var isNewGaiji, elem, filename;
            var options = arguments[0];
            var setting = {
                type: 'gaiji',
                elem: '',
                str: '',
                code: d.glob.code['wfa'],
                count: null ,
                fontClass: d.font[d.glob.code['wfa']]['fontClass'],
                fontface: d.font[d.glob.code['wfa']]['fontface'],
                fontID: d.font[d.glob.code['wfa']]['fontID'],
                conn: true
            }
            setting = d.extend(true, setting, options);
            d.SetState('Part WFA(' + setting.type + '): ' + d.font[d.glob.code['wfa']]['fontface']);
            var node = d.GetNode(setting['type'], setting['elem']);
            d.glob.gaiji[setting['fontID']] = d.glob.gaiji[setting['fontID']] ? d.glob.gaiji[setting['fontID']] : [];
            if (!setting['str']) {
                setting['str'] = node['str'];
                setting['str'] = d.DeleteEmpty(setting['str']);
                setting['str'] = d.DeleteDuplicates(setting['str']);
                setting['str'] = d.Str2UrlUTF8(setting['type'], setting['str']);
            } else {
                setting['str'] = d.DeleteEmpty(setting['str']);
            }
            if (setting['type'] == 'gaiji')
                isNewGaiji = d.IsNewGaiji(setting['str'], d.glob.gaiji[setting['fontID']]);
            if (isNewGaiji) {
                d.glob['fontID'] = setting['fontID'];
                var log = [' + **' + setting['fontID'] + '** Find New String', ' + *OLD(' + d.glob.gaiji[setting['fontID']].length + '): ' + d.glob.gaiji[setting['fontID']], ' + *NEW(' + setting['str'].length + '): ' + setting['str']]
                d.Log(d.log, 1);
                d.glob.gaiji[setting['fontID']] = setting['str'].concat(d.glob.gaiji[setting['fontID']]);
                if (setting['conn']) {
                    if (d.user['oneFont'] == false || d.glob.gaiji[setting['fontID']].length > 1) {
                        filename = d.GetRandomFilename();
                        if (setting['count'] != null ) {
                            setting['count'] = setting['count'] + 1;
                            d.glob.count[setting['code']] = setting['count'];
                        }
                        d.ConnectSocket(d.GetWFAQuery({
                            'str': d.glob.gaiji[setting['fontID']],
                            'code': setting['code'],
                            'fontface': (setting['count'] == null  || d.glob.count[setting['code']] < 1) ? setting['fontface'] : setting['fontface'] + setting['count'],
                            'filename': filename
                        }), function() {
                            if (d.glob.gaiji[setting['fontID']].length < (2048 / 2)) {
                                d.InsertScript('css', d.glob['url'] + d.user['cssTempPath'] + filename + '.css', setting['fontID']);
                            }
                            d.ReplaceNode({
                                type: setting['type'],
                                elem: node['elem'],
                                fontClass: setting['fontClass'],
                                fontface: setting['fontface'],
                                count: setting['count']
                            });
                            d.StartEmluator();
                            if (typeof (dynaTime) != 'undefined') {
                                dynaTime.PageEndTime = new Date();
                                var state = "GWS Loading: " + (dynaTime.PageEndTime.getTime() - dynaTime.PageInitTime.getTime()) / 1000 + " secs";
                                console.log(state);
                            }
                            d.SetState('Finish');
                        });
                    } else if (d.user['oneFont'] == true && d.glob.gaiji[setting['fontID']].length == 1) {
                        filename = d.UrlUTF82UTF8(d.glob.gaiji[setting['fontID']][0]);
                        filename = d.Str2UTF8(filename);
                        var fontface = (setting['count'] == null  || setting['count'] == 0) ? setting['fontface'] : setting['fontface'] + setting['count'];
                        var css = '@font-face{font-family: ' + fontface + '; src:url("' + d.glob.url + d.user.fontPath + d.font[setting['code']]['fontface'] + '/' + filename + d.glob['extendName'] + '.png");}';
                        d.CreateStyle(css, setting['fontID'] + 'style');
                        d.ReplaceNode({
                            type: setting['type'],
                            elem: node['elem'],
                            fontClass: setting['fontClass'],
                            fontface: setting['fontface'],
                            count: setting['count']
                        });
                        d.StartEmluator();
                        d.SetState('Finish');
                    }
                }
            } else if (node['elem'].length > 0) {
                d.Log(' + **' + setting['fontID'] + '** Find Node: ' + node['elem'].length, 1);
                d.ReplaceNode({
                    type: setting['type'],
                    elem: node['elem'],
                    fontClass: setting['fontClass'],
                    fontface: setting['fontface'],
                    count: setting['count']
                });
                d.StartEmluator();
                d.SetState('Finish');
            } else if (d.glob['fontID'] != setting['fontID']) {
                d.glob['fontID'] = setting['fontID'];
                d.ReplaceNode({
                    type: setting['type'],
                    elem: node['elem'],
                    fontClass: setting['fontClass'],
                    fontface: setting['fontface'],
                    count: setting['count']
                });
                d.StartEmluator();
                d.SetState('Finish');
            } else {
                d.StartEmluator();
                d.SetState('Finish');
            }
            if (d.user.reWFA === true && setting['fontID'] == d.font[d.glob.code['wfa']]['fontID']) {
                if (d.glob.reWFAID[0])
                    clearTimeout(d.glob.reWFAID[0]);
                d.glob.reWFAID[0] = setTimeout(function() {
            if (d.glob.browser == 'FIREFOX' && (document.characterSet.toUpperCase() == 'BIG5' || document.characterSet.toUpperCase() == 'BIG5-HKSCS')) {
                if (d.glob.features['uao'] === true) {
                    var node = d.GetNode('uao', d.DOM('body'));
                    var elem = node.elem;
                    d.FirefoxUAO(elem, 'uao');
                }
            }
            if (d.glob.browser == 'CHROME' && (document.characterSet.toUpperCase() == 'BIG5' || document.characterSet.toUpperCase() == 'BIG5-HKSCS')) {
                if (d.glob.features['hkscs'] === true) {
                    var node = d.GetNode('hkscs', d.DOM('body'));
                    var elem = node.elem;
                    d.FirefoxUAO(elem, 'hkscs');
                }
            }
                    d.StartWFA();
                    d.startTrigger.Initialize();
                }, d.user['reWFATimer']);
            }
        },
        GetRandomFilename: function() {
            return dynaRequire.GetRandom(0, 735723) + d.glob['extendName'] + '.png';
        },
        ConnectSocket: function(query, Callback) {
            d.SetState('Connect Socket');
            if (d.user.queryType == 'ajax') {
                if (d.user.autoFull == true && query['json']['wd'].split('').length > (2048 / 2)) {
                    d.glob.fullGaiji[d.glob.code['wfa']] = true;
                    d.StartWFA();
                    Callback();
                } else {
                    var ReadyGo = function() {
                        Callback();
                    }
                    query['json'] = JSON.stringify(query['json']);
                    d.SendXmlHttpRequest(query['url'], 'POST', true, query['json'], ReadyGo);
                }
                d.Log('ConnectSocket: ' + query['json'], 1);
            } 
            else {
                if (d.user.autoFull == true && query.split('').length > (2048 / 2)) {
                    d.glob.fullGaiji[d.glob.code['wfa']] = true;
                    d.StartWFA();
                    if (d.IsHere('candidate')) {
                        var str = d.DOM(d.user.WIME.candidate['strID'], 'class');
                        for (var i = 0; i < str.length; i++) {
                            str[i].style.fontFamily = d.font[d.glob.code['wime']]['fontface'];
                        }
                    }
                } else {
                    d.InsertScript('javascript', query, d.user.socket['id']);
                    dynaRequire.ReadyGo(function() {
                        d.glob['socketState'] = false;
                        d.glob['monitorState'] = false;
                        Callback();
                    }, function() {
                        if (d.glob['socketState'] === true || d.glob['monitorState'] === true) {
                            return true;
                        } else {
                            return false;
                        }
                    });
                }
                d.Log('ConnectSocket: ' + query, 1);
            }
        },
        GetWFAQuery: function(setting) {
            d.Log('## GetWFAQuery', 3);
            var url = d.glob['url'] + d.user['preprocessorPath'] + d.user.socket['filename'] + d.user['preprocessor'];
            var fontFN = typeof (d.font[setting['code']]['fontFN']) == 'undefined' ? d.font[setting['code']]['fontface'] : d.font[setting['code']]['fontFN']
            if (d.user['queryType'] == 'ajax') {
                var query = {
                    'url': url + '?queryType=ajax',
                    'json': {
                        'tf': fontFN,
                        'fn': setting['filename'],
                        'wd': ' ' + decodeURI(setting['str'].toString()),
                        'ff': setting['fontface'],
                        'pnglocation': d.user['pngPath'] + setting['filename'],
                        'isUTF8': true,
                        'theProtocol': d.glob['theProtocol'],
                        'useBrowser': d.glob['fontType'],
                        'PEncode': d.glob['pageEncode']
                    }
                }
            } 
            else {
                query = url + '?queryType=' + d.user['queryType'] + '&tf=' + fontFN + '&wd=' + ' ' + setting['str'] + '&fn=' + setting['filename'] + '&ff=' + setting['fontface'] + '&pnglocation=' + d.user['pngPath'] + setting['filename'] + '&isUTF8=true' + '&theProtocol=' + d.glob['theProtocol'] + '&useBrowser=' + d.glob['fontType'] + '&PEncode=' + d.glob['pageEncode'];
            }
            return query;
        }
    });
    d.extend(true, d.user, {
        autoFull: true,
        oneFont: true,
        setGaijiClass: false,
        reWFA: false,
        reWFATimer: 1000
    });
    d.extend(true, d.glob, {
        code: {
            'wfa': 1
        },
        socketState: false,
        monitorState: false,
        reWFAID: []
    });
})(dynaGWS);
